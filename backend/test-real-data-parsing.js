const GalileoskyParser = require('./src/services/parser');
const logger = require('./src/utils/logger');

// Real hex data from your logs - this should contain 47 records
const realHexData

// Convert hex string to buffer
const realDataBuffer = Buffer.from(realHexData, 'hex');

async function testRealDataParsing() {
    console.log('=== Real Data Multi-Record Parsing Test ===\n');
    
    const parser = new GalileoskyParser();
    const testConnection = '103.149.224.66:50153'; // From your logs
    
    console.log('Testing with real hex data from your logs...');
    console.log(`Hex data length: ${realHexData.length} characters`);
    console.log(`Buffer length: ${realDataBuffer.length} bytes`);
    console.log(`Expected records: 47 (based on your manual count)`);
    console.log('');
    
    try {
        const result = await parser.parse(realDataBuffer, testConnection);
        
        console.log('=== PARSING RESULTS ===');
        console.log(`✅ Parsed ${result.records.length} records`);
        console.log(`Expected: 47 records`);
        console.log(`Actual: ${result.records.length} records`);
        
        if (result.records.length === 47) {
            console.log('✅ SUCCESS: All 47 records parsed correctly!');
        } else if (result.records.length > 0) {
            console.log(`⚠️  PARTIAL SUCCESS: Parsed ${result.records.length}/47 records`);
        } else {
            console.log('❌ FAILED: No records parsed');
        }
        
        console.log('\n=== RECORD DETAILS ===');
        result.records.forEach((record, index) => {
            console.log(`Record ${index + 1}: ${Object.keys(record.tags).length} tags`);
            console.log(`  Tags: ${Object.keys(record.tags).join(', ')}`);
            
            // Show some key tag values
            if (record.tags['0x20']) {
                console.log(`  DateTime: ${record.tags['0x20'].value}`);
            }
            if (record.tags['0x30']) {
                const coords = record.tags['0x30'].value;
                if (coords && coords.latitude && coords.longitude) {
                    console.log(`  Coordinates: ${coords.latitude}, ${coords.longitude}`);
                }
            }
            if (record.tags['0x33']) {
                const speedDir = record.tags['0x33'].value;
                if (speedDir && speedDir.speed) {
                    console.log(`  Speed: ${speedDir.speed} km/h`);
                }
            }
            console.log('');
        });
        
        // Summary statistics
        console.log('=== SUMMARY STATISTICS ===');
        const tagCounts = {};
        result.records.forEach(record => {
            Object.keys(record.tags).forEach(tag => {
                tagCounts[tag] = (tagCounts[tag] || 0) + 1;
            });
        });
        
        console.log('Tag frequency across all records:');
        Object.entries(tagCounts)
            .sort(([,a], [,b]) => b - a)
            .forEach(([tag, count]) => {
                console.log(`  ${tag}: ${count} records`);
            });
        
    } catch (error) {
        console.log(`❌ Test FAILED with error: ${error.message}`);
        console.log('Stack trace:', error.stack);
    }
}

// Run the test
testRealDataParsing().catch(error => {
    console.error('Test execution failed:', error);
    process.exit(1);
}); 